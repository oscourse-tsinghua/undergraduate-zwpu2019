// pico_cyc10_qys_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module pico_cyc10_qys_mm_interconnect_0 (
		input  wire [31:0] pico_cyc10_0_altera_axi4lite_master_awaddr,     //      pico_cyc10_0_altera_axi4lite_master.awaddr
		input  wire [2:0]  pico_cyc10_0_altera_axi4lite_master_awprot,     //                                         .awprot
		input  wire        pico_cyc10_0_altera_axi4lite_master_awvalid,    //                                         .awvalid
		output wire        pico_cyc10_0_altera_axi4lite_master_awready,    //                                         .awready
		input  wire [31:0] pico_cyc10_0_altera_axi4lite_master_wdata,      //                                         .wdata
		input  wire [3:0]  pico_cyc10_0_altera_axi4lite_master_wstrb,      //                                         .wstrb
		input  wire        pico_cyc10_0_altera_axi4lite_master_wvalid,     //                                         .wvalid
		output wire        pico_cyc10_0_altera_axi4lite_master_wready,     //                                         .wready
		output wire [1:0]  pico_cyc10_0_altera_axi4lite_master_bresp,      //                                         .bresp
		output wire        pico_cyc10_0_altera_axi4lite_master_bvalid,     //                                         .bvalid
		input  wire        pico_cyc10_0_altera_axi4lite_master_bready,     //                                         .bready
		input  wire [31:0] pico_cyc10_0_altera_axi4lite_master_araddr,     //                                         .araddr
		input  wire [2:0]  pico_cyc10_0_altera_axi4lite_master_arprot,     //                                         .arprot
		input  wire        pico_cyc10_0_altera_axi4lite_master_arvalid,    //                                         .arvalid
		output wire        pico_cyc10_0_altera_axi4lite_master_arready,    //                                         .arready
		output wire [31:0] pico_cyc10_0_altera_axi4lite_master_rdata,      //                                         .rdata
		output wire [1:0]  pico_cyc10_0_altera_axi4lite_master_rresp,      //                                         .rresp
		output wire        pico_cyc10_0_altera_axi4lite_master_rvalid,     //                                         .rvalid
		input  wire        pico_cyc10_0_altera_axi4lite_master_rready,     //                                         .rready
		input  wire        clk_0_clk_clk,                                  //                                clk_0_clk.clk
		input  wire        pico_cyc10_0_reset_reset_bridge_in_reset_reset, // pico_cyc10_0_reset_reset_bridge_in_reset.reset
		output wire [1:0]  led_s1_address,                                 //                                   led_s1.address
		output wire        led_s1_write,                                   //                                         .write
		input  wire [31:0] led_s1_readdata,                                //                                         .readdata
		output wire [31:0] led_s1_writedata,                               //                                         .writedata
		output wire        led_s1_chipselect,                              //                                         .chipselect
		output wire [9:0]  ram_s1_address,                                 //                                   ram_s1.address
		output wire        ram_s1_write,                                   //                                         .write
		input  wire [31:0] ram_s1_readdata,                                //                                         .readdata
		output wire [31:0] ram_s1_writedata,                               //                                         .writedata
		output wire [3:0]  ram_s1_byteenable,                              //                                         .byteenable
		output wire        ram_s1_chipselect,                              //                                         .chipselect
		output wire        ram_s1_clken,                                   //                                         .clken
		output wire [13:0] rom_s1_address,                                 //                                   rom_s1.address
		output wire        rom_s1_write,                                   //                                         .write
		input  wire [31:0] rom_s1_readdata,                                //                                         .readdata
		output wire [31:0] rom_s1_writedata,                               //                                         .writedata
		output wire [3:0]  rom_s1_byteenable,                              //                                         .byteenable
		output wire        rom_s1_chipselect,                              //                                         .chipselect
		output wire        rom_s1_clken,                                   //                                         .clken
		output wire        rom_s1_debugaccess,                             //                                         .debugaccess
		output wire [1:0]  seg_s1_address,                                 //                                   seg_s1.address
		output wire        seg_s1_write,                                   //                                         .write
		input  wire [31:0] seg_s1_readdata,                                //                                         .readdata
		output wire [31:0] seg_s1_writedata,                               //                                         .writedata
		output wire        seg_s1_chipselect,                              //                                         .chipselect
		output wire [2:0]  uart_0_s1_address,                              //                                uart_0_s1.address
		output wire        uart_0_s1_write,                                //                                         .write
		output wire        uart_0_s1_read,                                 //                                         .read
		input  wire [15:0] uart_0_s1_readdata,                             //                                         .readdata
		output wire [15:0] uart_0_s1_writedata,                            //                                         .writedata
		output wire        uart_0_s1_begintransfer,                        //                                         .begintransfer
		output wire        uart_0_s1_chipselect                            //                                         .chipselect
	);

	wire          rsp_mux_src_valid;                                                // rsp_mux:src_valid -> pico_cyc10_0_altera_axi4lite_master_agent:write_rp_valid
	wire  [105:0] rsp_mux_src_data;                                                 // rsp_mux:src_data -> pico_cyc10_0_altera_axi4lite_master_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                // pico_cyc10_0_altera_axi4lite_master_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [4:0] rsp_mux_src_channel;                                              // rsp_mux:src_channel -> pico_cyc10_0_altera_axi4lite_master_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                        // rsp_mux:src_startofpacket -> pico_cyc10_0_altera_axi4lite_master_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                          // rsp_mux:src_endofpacket -> pico_cyc10_0_altera_axi4lite_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                            // rsp_mux_001:src_valid -> pico_cyc10_0_altera_axi4lite_master_agent:read_rp_valid
	wire  [105:0] rsp_mux_001_src_data;                                             // rsp_mux_001:src_data -> pico_cyc10_0_altera_axi4lite_master_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                            // pico_cyc10_0_altera_axi4lite_master_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [4:0] rsp_mux_001_src_channel;                                          // rsp_mux_001:src_channel -> pico_cyc10_0_altera_axi4lite_master_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                    // rsp_mux_001:src_startofpacket -> pico_cyc10_0_altera_axi4lite_master_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                      // rsp_mux_001:src_endofpacket -> pico_cyc10_0_altera_axi4lite_master_agent:read_rp_endofpacket
	wire   [31:0] rom_s1_agent_m0_readdata;                                         // rom_s1_translator:uav_readdata -> rom_s1_agent:m0_readdata
	wire          rom_s1_agent_m0_waitrequest;                                      // rom_s1_translator:uav_waitrequest -> rom_s1_agent:m0_waitrequest
	wire          rom_s1_agent_m0_debugaccess;                                      // rom_s1_agent:m0_debugaccess -> rom_s1_translator:uav_debugaccess
	wire   [31:0] rom_s1_agent_m0_address;                                          // rom_s1_agent:m0_address -> rom_s1_translator:uav_address
	wire    [3:0] rom_s1_agent_m0_byteenable;                                       // rom_s1_agent:m0_byteenable -> rom_s1_translator:uav_byteenable
	wire          rom_s1_agent_m0_read;                                             // rom_s1_agent:m0_read -> rom_s1_translator:uav_read
	wire          rom_s1_agent_m0_readdatavalid;                                    // rom_s1_translator:uav_readdatavalid -> rom_s1_agent:m0_readdatavalid
	wire          rom_s1_agent_m0_lock;                                             // rom_s1_agent:m0_lock -> rom_s1_translator:uav_lock
	wire   [31:0] rom_s1_agent_m0_writedata;                                        // rom_s1_agent:m0_writedata -> rom_s1_translator:uav_writedata
	wire          rom_s1_agent_m0_write;                                            // rom_s1_agent:m0_write -> rom_s1_translator:uav_write
	wire    [2:0] rom_s1_agent_m0_burstcount;                                       // rom_s1_agent:m0_burstcount -> rom_s1_translator:uav_burstcount
	wire          rom_s1_agent_rf_source_valid;                                     // rom_s1_agent:rf_source_valid -> rom_s1_agent_rsp_fifo:in_valid
	wire  [106:0] rom_s1_agent_rf_source_data;                                      // rom_s1_agent:rf_source_data -> rom_s1_agent_rsp_fifo:in_data
	wire          rom_s1_agent_rf_source_ready;                                     // rom_s1_agent_rsp_fifo:in_ready -> rom_s1_agent:rf_source_ready
	wire          rom_s1_agent_rf_source_startofpacket;                             // rom_s1_agent:rf_source_startofpacket -> rom_s1_agent_rsp_fifo:in_startofpacket
	wire          rom_s1_agent_rf_source_endofpacket;                               // rom_s1_agent:rf_source_endofpacket -> rom_s1_agent_rsp_fifo:in_endofpacket
	wire          rom_s1_agent_rsp_fifo_out_valid;                                  // rom_s1_agent_rsp_fifo:out_valid -> rom_s1_agent:rf_sink_valid
	wire  [106:0] rom_s1_agent_rsp_fifo_out_data;                                   // rom_s1_agent_rsp_fifo:out_data -> rom_s1_agent:rf_sink_data
	wire          rom_s1_agent_rsp_fifo_out_ready;                                  // rom_s1_agent:rf_sink_ready -> rom_s1_agent_rsp_fifo:out_ready
	wire          rom_s1_agent_rsp_fifo_out_startofpacket;                          // rom_s1_agent_rsp_fifo:out_startofpacket -> rom_s1_agent:rf_sink_startofpacket
	wire          rom_s1_agent_rsp_fifo_out_endofpacket;                            // rom_s1_agent_rsp_fifo:out_endofpacket -> rom_s1_agent:rf_sink_endofpacket
	wire          rom_s1_agent_rdata_fifo_src_valid;                                // rom_s1_agent:rdata_fifo_src_valid -> rom_s1_agent_rdata_fifo:in_valid
	wire   [33:0] rom_s1_agent_rdata_fifo_src_data;                                 // rom_s1_agent:rdata_fifo_src_data -> rom_s1_agent_rdata_fifo:in_data
	wire          rom_s1_agent_rdata_fifo_src_ready;                                // rom_s1_agent_rdata_fifo:in_ready -> rom_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                // cmd_mux:src_valid -> rom_s1_agent:cp_valid
	wire  [105:0] cmd_mux_src_data;                                                 // cmd_mux:src_data -> rom_s1_agent:cp_data
	wire          cmd_mux_src_ready;                                                // rom_s1_agent:cp_ready -> cmd_mux:src_ready
	wire    [4:0] cmd_mux_src_channel;                                              // cmd_mux:src_channel -> rom_s1_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                        // cmd_mux:src_startofpacket -> rom_s1_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                          // cmd_mux:src_endofpacket -> rom_s1_agent:cp_endofpacket
	wire   [31:0] ram_s1_agent_m0_readdata;                                         // ram_s1_translator:uav_readdata -> ram_s1_agent:m0_readdata
	wire          ram_s1_agent_m0_waitrequest;                                      // ram_s1_translator:uav_waitrequest -> ram_s1_agent:m0_waitrequest
	wire          ram_s1_agent_m0_debugaccess;                                      // ram_s1_agent:m0_debugaccess -> ram_s1_translator:uav_debugaccess
	wire   [31:0] ram_s1_agent_m0_address;                                          // ram_s1_agent:m0_address -> ram_s1_translator:uav_address
	wire    [3:0] ram_s1_agent_m0_byteenable;                                       // ram_s1_agent:m0_byteenable -> ram_s1_translator:uav_byteenable
	wire          ram_s1_agent_m0_read;                                             // ram_s1_agent:m0_read -> ram_s1_translator:uav_read
	wire          ram_s1_agent_m0_readdatavalid;                                    // ram_s1_translator:uav_readdatavalid -> ram_s1_agent:m0_readdatavalid
	wire          ram_s1_agent_m0_lock;                                             // ram_s1_agent:m0_lock -> ram_s1_translator:uav_lock
	wire   [31:0] ram_s1_agent_m0_writedata;                                        // ram_s1_agent:m0_writedata -> ram_s1_translator:uav_writedata
	wire          ram_s1_agent_m0_write;                                            // ram_s1_agent:m0_write -> ram_s1_translator:uav_write
	wire    [2:0] ram_s1_agent_m0_burstcount;                                       // ram_s1_agent:m0_burstcount -> ram_s1_translator:uav_burstcount
	wire          ram_s1_agent_rf_source_valid;                                     // ram_s1_agent:rf_source_valid -> ram_s1_agent_rsp_fifo:in_valid
	wire  [106:0] ram_s1_agent_rf_source_data;                                      // ram_s1_agent:rf_source_data -> ram_s1_agent_rsp_fifo:in_data
	wire          ram_s1_agent_rf_source_ready;                                     // ram_s1_agent_rsp_fifo:in_ready -> ram_s1_agent:rf_source_ready
	wire          ram_s1_agent_rf_source_startofpacket;                             // ram_s1_agent:rf_source_startofpacket -> ram_s1_agent_rsp_fifo:in_startofpacket
	wire          ram_s1_agent_rf_source_endofpacket;                               // ram_s1_agent:rf_source_endofpacket -> ram_s1_agent_rsp_fifo:in_endofpacket
	wire          ram_s1_agent_rsp_fifo_out_valid;                                  // ram_s1_agent_rsp_fifo:out_valid -> ram_s1_agent:rf_sink_valid
	wire  [106:0] ram_s1_agent_rsp_fifo_out_data;                                   // ram_s1_agent_rsp_fifo:out_data -> ram_s1_agent:rf_sink_data
	wire          ram_s1_agent_rsp_fifo_out_ready;                                  // ram_s1_agent:rf_sink_ready -> ram_s1_agent_rsp_fifo:out_ready
	wire          ram_s1_agent_rsp_fifo_out_startofpacket;                          // ram_s1_agent_rsp_fifo:out_startofpacket -> ram_s1_agent:rf_sink_startofpacket
	wire          ram_s1_agent_rsp_fifo_out_endofpacket;                            // ram_s1_agent_rsp_fifo:out_endofpacket -> ram_s1_agent:rf_sink_endofpacket
	wire          ram_s1_agent_rdata_fifo_src_valid;                                // ram_s1_agent:rdata_fifo_src_valid -> ram_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ram_s1_agent_rdata_fifo_src_data;                                 // ram_s1_agent:rdata_fifo_src_data -> ram_s1_agent_rdata_fifo:in_data
	wire          ram_s1_agent_rdata_fifo_src_ready;                                // ram_s1_agent_rdata_fifo:in_ready -> ram_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                            // cmd_mux_001:src_valid -> ram_s1_agent:cp_valid
	wire  [105:0] cmd_mux_001_src_data;                                             // cmd_mux_001:src_data -> ram_s1_agent:cp_data
	wire          cmd_mux_001_src_ready;                                            // ram_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [4:0] cmd_mux_001_src_channel;                                          // cmd_mux_001:src_channel -> ram_s1_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                    // cmd_mux_001:src_startofpacket -> ram_s1_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                      // cmd_mux_001:src_endofpacket -> ram_s1_agent:cp_endofpacket
	wire   [31:0] led_s1_agent_m0_readdata;                                         // led_s1_translator:uav_readdata -> led_s1_agent:m0_readdata
	wire          led_s1_agent_m0_waitrequest;                                      // led_s1_translator:uav_waitrequest -> led_s1_agent:m0_waitrequest
	wire          led_s1_agent_m0_debugaccess;                                      // led_s1_agent:m0_debugaccess -> led_s1_translator:uav_debugaccess
	wire   [31:0] led_s1_agent_m0_address;                                          // led_s1_agent:m0_address -> led_s1_translator:uav_address
	wire    [3:0] led_s1_agent_m0_byteenable;                                       // led_s1_agent:m0_byteenable -> led_s1_translator:uav_byteenable
	wire          led_s1_agent_m0_read;                                             // led_s1_agent:m0_read -> led_s1_translator:uav_read
	wire          led_s1_agent_m0_readdatavalid;                                    // led_s1_translator:uav_readdatavalid -> led_s1_agent:m0_readdatavalid
	wire          led_s1_agent_m0_lock;                                             // led_s1_agent:m0_lock -> led_s1_translator:uav_lock
	wire   [31:0] led_s1_agent_m0_writedata;                                        // led_s1_agent:m0_writedata -> led_s1_translator:uav_writedata
	wire          led_s1_agent_m0_write;                                            // led_s1_agent:m0_write -> led_s1_translator:uav_write
	wire    [2:0] led_s1_agent_m0_burstcount;                                       // led_s1_agent:m0_burstcount -> led_s1_translator:uav_burstcount
	wire          led_s1_agent_rf_source_valid;                                     // led_s1_agent:rf_source_valid -> led_s1_agent_rsp_fifo:in_valid
	wire  [106:0] led_s1_agent_rf_source_data;                                      // led_s1_agent:rf_source_data -> led_s1_agent_rsp_fifo:in_data
	wire          led_s1_agent_rf_source_ready;                                     // led_s1_agent_rsp_fifo:in_ready -> led_s1_agent:rf_source_ready
	wire          led_s1_agent_rf_source_startofpacket;                             // led_s1_agent:rf_source_startofpacket -> led_s1_agent_rsp_fifo:in_startofpacket
	wire          led_s1_agent_rf_source_endofpacket;                               // led_s1_agent:rf_source_endofpacket -> led_s1_agent_rsp_fifo:in_endofpacket
	wire          led_s1_agent_rsp_fifo_out_valid;                                  // led_s1_agent_rsp_fifo:out_valid -> led_s1_agent:rf_sink_valid
	wire  [106:0] led_s1_agent_rsp_fifo_out_data;                                   // led_s1_agent_rsp_fifo:out_data -> led_s1_agent:rf_sink_data
	wire          led_s1_agent_rsp_fifo_out_ready;                                  // led_s1_agent:rf_sink_ready -> led_s1_agent_rsp_fifo:out_ready
	wire          led_s1_agent_rsp_fifo_out_startofpacket;                          // led_s1_agent_rsp_fifo:out_startofpacket -> led_s1_agent:rf_sink_startofpacket
	wire          led_s1_agent_rsp_fifo_out_endofpacket;                            // led_s1_agent_rsp_fifo:out_endofpacket -> led_s1_agent:rf_sink_endofpacket
	wire          led_s1_agent_rdata_fifo_src_valid;                                // led_s1_agent:rdata_fifo_src_valid -> led_s1_agent_rdata_fifo:in_valid
	wire   [33:0] led_s1_agent_rdata_fifo_src_data;                                 // led_s1_agent:rdata_fifo_src_data -> led_s1_agent_rdata_fifo:in_data
	wire          led_s1_agent_rdata_fifo_src_ready;                                // led_s1_agent_rdata_fifo:in_ready -> led_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                            // cmd_mux_002:src_valid -> led_s1_agent:cp_valid
	wire  [105:0] cmd_mux_002_src_data;                                             // cmd_mux_002:src_data -> led_s1_agent:cp_data
	wire          cmd_mux_002_src_ready;                                            // led_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [4:0] cmd_mux_002_src_channel;                                          // cmd_mux_002:src_channel -> led_s1_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                    // cmd_mux_002:src_startofpacket -> led_s1_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                      // cmd_mux_002:src_endofpacket -> led_s1_agent:cp_endofpacket
	wire   [31:0] seg_s1_agent_m0_readdata;                                         // seg_s1_translator:uav_readdata -> seg_s1_agent:m0_readdata
	wire          seg_s1_agent_m0_waitrequest;                                      // seg_s1_translator:uav_waitrequest -> seg_s1_agent:m0_waitrequest
	wire          seg_s1_agent_m0_debugaccess;                                      // seg_s1_agent:m0_debugaccess -> seg_s1_translator:uav_debugaccess
	wire   [31:0] seg_s1_agent_m0_address;                                          // seg_s1_agent:m0_address -> seg_s1_translator:uav_address
	wire    [3:0] seg_s1_agent_m0_byteenable;                                       // seg_s1_agent:m0_byteenable -> seg_s1_translator:uav_byteenable
	wire          seg_s1_agent_m0_read;                                             // seg_s1_agent:m0_read -> seg_s1_translator:uav_read
	wire          seg_s1_agent_m0_readdatavalid;                                    // seg_s1_translator:uav_readdatavalid -> seg_s1_agent:m0_readdatavalid
	wire          seg_s1_agent_m0_lock;                                             // seg_s1_agent:m0_lock -> seg_s1_translator:uav_lock
	wire   [31:0] seg_s1_agent_m0_writedata;                                        // seg_s1_agent:m0_writedata -> seg_s1_translator:uav_writedata
	wire          seg_s1_agent_m0_write;                                            // seg_s1_agent:m0_write -> seg_s1_translator:uav_write
	wire    [2:0] seg_s1_agent_m0_burstcount;                                       // seg_s1_agent:m0_burstcount -> seg_s1_translator:uav_burstcount
	wire          seg_s1_agent_rf_source_valid;                                     // seg_s1_agent:rf_source_valid -> seg_s1_agent_rsp_fifo:in_valid
	wire  [106:0] seg_s1_agent_rf_source_data;                                      // seg_s1_agent:rf_source_data -> seg_s1_agent_rsp_fifo:in_data
	wire          seg_s1_agent_rf_source_ready;                                     // seg_s1_agent_rsp_fifo:in_ready -> seg_s1_agent:rf_source_ready
	wire          seg_s1_agent_rf_source_startofpacket;                             // seg_s1_agent:rf_source_startofpacket -> seg_s1_agent_rsp_fifo:in_startofpacket
	wire          seg_s1_agent_rf_source_endofpacket;                               // seg_s1_agent:rf_source_endofpacket -> seg_s1_agent_rsp_fifo:in_endofpacket
	wire          seg_s1_agent_rsp_fifo_out_valid;                                  // seg_s1_agent_rsp_fifo:out_valid -> seg_s1_agent:rf_sink_valid
	wire  [106:0] seg_s1_agent_rsp_fifo_out_data;                                   // seg_s1_agent_rsp_fifo:out_data -> seg_s1_agent:rf_sink_data
	wire          seg_s1_agent_rsp_fifo_out_ready;                                  // seg_s1_agent:rf_sink_ready -> seg_s1_agent_rsp_fifo:out_ready
	wire          seg_s1_agent_rsp_fifo_out_startofpacket;                          // seg_s1_agent_rsp_fifo:out_startofpacket -> seg_s1_agent:rf_sink_startofpacket
	wire          seg_s1_agent_rsp_fifo_out_endofpacket;                            // seg_s1_agent_rsp_fifo:out_endofpacket -> seg_s1_agent:rf_sink_endofpacket
	wire          seg_s1_agent_rdata_fifo_src_valid;                                // seg_s1_agent:rdata_fifo_src_valid -> seg_s1_agent_rdata_fifo:in_valid
	wire   [33:0] seg_s1_agent_rdata_fifo_src_data;                                 // seg_s1_agent:rdata_fifo_src_data -> seg_s1_agent_rdata_fifo:in_data
	wire          seg_s1_agent_rdata_fifo_src_ready;                                // seg_s1_agent_rdata_fifo:in_ready -> seg_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                            // cmd_mux_003:src_valid -> seg_s1_agent:cp_valid
	wire  [105:0] cmd_mux_003_src_data;                                             // cmd_mux_003:src_data -> seg_s1_agent:cp_data
	wire          cmd_mux_003_src_ready;                                            // seg_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [4:0] cmd_mux_003_src_channel;                                          // cmd_mux_003:src_channel -> seg_s1_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                    // cmd_mux_003:src_startofpacket -> seg_s1_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                      // cmd_mux_003:src_endofpacket -> seg_s1_agent:cp_endofpacket
	wire   [31:0] uart_0_s1_agent_m0_readdata;                                      // uart_0_s1_translator:uav_readdata -> uart_0_s1_agent:m0_readdata
	wire          uart_0_s1_agent_m0_waitrequest;                                   // uart_0_s1_translator:uav_waitrequest -> uart_0_s1_agent:m0_waitrequest
	wire          uart_0_s1_agent_m0_debugaccess;                                   // uart_0_s1_agent:m0_debugaccess -> uart_0_s1_translator:uav_debugaccess
	wire   [31:0] uart_0_s1_agent_m0_address;                                       // uart_0_s1_agent:m0_address -> uart_0_s1_translator:uav_address
	wire    [3:0] uart_0_s1_agent_m0_byteenable;                                    // uart_0_s1_agent:m0_byteenable -> uart_0_s1_translator:uav_byteenable
	wire          uart_0_s1_agent_m0_read;                                          // uart_0_s1_agent:m0_read -> uart_0_s1_translator:uav_read
	wire          uart_0_s1_agent_m0_readdatavalid;                                 // uart_0_s1_translator:uav_readdatavalid -> uart_0_s1_agent:m0_readdatavalid
	wire          uart_0_s1_agent_m0_lock;                                          // uart_0_s1_agent:m0_lock -> uart_0_s1_translator:uav_lock
	wire   [31:0] uart_0_s1_agent_m0_writedata;                                     // uart_0_s1_agent:m0_writedata -> uart_0_s1_translator:uav_writedata
	wire          uart_0_s1_agent_m0_write;                                         // uart_0_s1_agent:m0_write -> uart_0_s1_translator:uav_write
	wire    [2:0] uart_0_s1_agent_m0_burstcount;                                    // uart_0_s1_agent:m0_burstcount -> uart_0_s1_translator:uav_burstcount
	wire          uart_0_s1_agent_rf_source_valid;                                  // uart_0_s1_agent:rf_source_valid -> uart_0_s1_agent_rsp_fifo:in_valid
	wire  [106:0] uart_0_s1_agent_rf_source_data;                                   // uart_0_s1_agent:rf_source_data -> uart_0_s1_agent_rsp_fifo:in_data
	wire          uart_0_s1_agent_rf_source_ready;                                  // uart_0_s1_agent_rsp_fifo:in_ready -> uart_0_s1_agent:rf_source_ready
	wire          uart_0_s1_agent_rf_source_startofpacket;                          // uart_0_s1_agent:rf_source_startofpacket -> uart_0_s1_agent_rsp_fifo:in_startofpacket
	wire          uart_0_s1_agent_rf_source_endofpacket;                            // uart_0_s1_agent:rf_source_endofpacket -> uart_0_s1_agent_rsp_fifo:in_endofpacket
	wire          uart_0_s1_agent_rsp_fifo_out_valid;                               // uart_0_s1_agent_rsp_fifo:out_valid -> uart_0_s1_agent:rf_sink_valid
	wire  [106:0] uart_0_s1_agent_rsp_fifo_out_data;                                // uart_0_s1_agent_rsp_fifo:out_data -> uart_0_s1_agent:rf_sink_data
	wire          uart_0_s1_agent_rsp_fifo_out_ready;                               // uart_0_s1_agent:rf_sink_ready -> uart_0_s1_agent_rsp_fifo:out_ready
	wire          uart_0_s1_agent_rsp_fifo_out_startofpacket;                       // uart_0_s1_agent_rsp_fifo:out_startofpacket -> uart_0_s1_agent:rf_sink_startofpacket
	wire          uart_0_s1_agent_rsp_fifo_out_endofpacket;                         // uart_0_s1_agent_rsp_fifo:out_endofpacket -> uart_0_s1_agent:rf_sink_endofpacket
	wire          uart_0_s1_agent_rdata_fifo_src_valid;                             // uart_0_s1_agent:rdata_fifo_src_valid -> uart_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] uart_0_s1_agent_rdata_fifo_src_data;                              // uart_0_s1_agent:rdata_fifo_src_data -> uart_0_s1_agent_rdata_fifo:in_data
	wire          uart_0_s1_agent_rdata_fifo_src_ready;                             // uart_0_s1_agent_rdata_fifo:in_ready -> uart_0_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                            // cmd_mux_004:src_valid -> uart_0_s1_agent:cp_valid
	wire  [105:0] cmd_mux_004_src_data;                                             // cmd_mux_004:src_data -> uart_0_s1_agent:cp_data
	wire          cmd_mux_004_src_ready;                                            // uart_0_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [4:0] cmd_mux_004_src_channel;                                          // cmd_mux_004:src_channel -> uart_0_s1_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                    // cmd_mux_004:src_startofpacket -> uart_0_s1_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                      // cmd_mux_004:src_endofpacket -> uart_0_s1_agent:cp_endofpacket
	wire          pico_cyc10_0_altera_axi4lite_master_agent_write_cp_valid;         // pico_cyc10_0_altera_axi4lite_master_agent:write_cp_valid -> router:sink_valid
	wire  [105:0] pico_cyc10_0_altera_axi4lite_master_agent_write_cp_data;          // pico_cyc10_0_altera_axi4lite_master_agent:write_cp_data -> router:sink_data
	wire          pico_cyc10_0_altera_axi4lite_master_agent_write_cp_ready;         // router:sink_ready -> pico_cyc10_0_altera_axi4lite_master_agent:write_cp_ready
	wire          pico_cyc10_0_altera_axi4lite_master_agent_write_cp_startofpacket; // pico_cyc10_0_altera_axi4lite_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          pico_cyc10_0_altera_axi4lite_master_agent_write_cp_endofpacket;   // pico_cyc10_0_altera_axi4lite_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                 // router:src_valid -> cmd_demux:sink_valid
	wire  [105:0] router_src_data;                                                  // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                 // cmd_demux:sink_ready -> router:src_ready
	wire    [4:0] router_src_channel;                                               // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                         // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                           // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          pico_cyc10_0_altera_axi4lite_master_agent_read_cp_valid;          // pico_cyc10_0_altera_axi4lite_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [105:0] pico_cyc10_0_altera_axi4lite_master_agent_read_cp_data;           // pico_cyc10_0_altera_axi4lite_master_agent:read_cp_data -> router_001:sink_data
	wire          pico_cyc10_0_altera_axi4lite_master_agent_read_cp_ready;          // router_001:sink_ready -> pico_cyc10_0_altera_axi4lite_master_agent:read_cp_ready
	wire          pico_cyc10_0_altera_axi4lite_master_agent_read_cp_startofpacket;  // pico_cyc10_0_altera_axi4lite_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          pico_cyc10_0_altera_axi4lite_master_agent_read_cp_endofpacket;    // pico_cyc10_0_altera_axi4lite_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                             // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [105:0] router_001_src_data;                                              // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                             // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [4:0] router_001_src_channel;                                           // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                     // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                       // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rom_s1_agent_rp_valid;                                            // rom_s1_agent:rp_valid -> router_002:sink_valid
	wire  [105:0] rom_s1_agent_rp_data;                                             // rom_s1_agent:rp_data -> router_002:sink_data
	wire          rom_s1_agent_rp_ready;                                            // router_002:sink_ready -> rom_s1_agent:rp_ready
	wire          rom_s1_agent_rp_startofpacket;                                    // rom_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          rom_s1_agent_rp_endofpacket;                                      // rom_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                             // router_002:src_valid -> rsp_demux:sink_valid
	wire  [105:0] router_002_src_data;                                              // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                             // rsp_demux:sink_ready -> router_002:src_ready
	wire    [4:0] router_002_src_channel;                                           // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                     // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                       // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          ram_s1_agent_rp_valid;                                            // ram_s1_agent:rp_valid -> router_003:sink_valid
	wire  [105:0] ram_s1_agent_rp_data;                                             // ram_s1_agent:rp_data -> router_003:sink_data
	wire          ram_s1_agent_rp_ready;                                            // router_003:sink_ready -> ram_s1_agent:rp_ready
	wire          ram_s1_agent_rp_startofpacket;                                    // ram_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          ram_s1_agent_rp_endofpacket;                                      // ram_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                             // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [105:0] router_003_src_data;                                              // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                             // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [4:0] router_003_src_channel;                                           // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                     // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                       // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          led_s1_agent_rp_valid;                                            // led_s1_agent:rp_valid -> router_004:sink_valid
	wire  [105:0] led_s1_agent_rp_data;                                             // led_s1_agent:rp_data -> router_004:sink_data
	wire          led_s1_agent_rp_ready;                                            // router_004:sink_ready -> led_s1_agent:rp_ready
	wire          led_s1_agent_rp_startofpacket;                                    // led_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          led_s1_agent_rp_endofpacket;                                      // led_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                             // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [105:0] router_004_src_data;                                              // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                             // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [4:0] router_004_src_channel;                                           // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                     // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                       // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          seg_s1_agent_rp_valid;                                            // seg_s1_agent:rp_valid -> router_005:sink_valid
	wire  [105:0] seg_s1_agent_rp_data;                                             // seg_s1_agent:rp_data -> router_005:sink_data
	wire          seg_s1_agent_rp_ready;                                            // router_005:sink_ready -> seg_s1_agent:rp_ready
	wire          seg_s1_agent_rp_startofpacket;                                    // seg_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          seg_s1_agent_rp_endofpacket;                                      // seg_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                             // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [105:0] router_005_src_data;                                              // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                             // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [4:0] router_005_src_channel;                                           // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                     // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                       // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          uart_0_s1_agent_rp_valid;                                         // uart_0_s1_agent:rp_valid -> router_006:sink_valid
	wire  [105:0] uart_0_s1_agent_rp_data;                                          // uart_0_s1_agent:rp_data -> router_006:sink_data
	wire          uart_0_s1_agent_rp_ready;                                         // router_006:sink_ready -> uart_0_s1_agent:rp_ready
	wire          uart_0_s1_agent_rp_startofpacket;                                 // uart_0_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          uart_0_s1_agent_rp_endofpacket;                                   // uart_0_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                             // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [105:0] router_006_src_data;                                              // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                             // rsp_demux_004:sink_ready -> router_006:src_ready
	wire    [4:0] router_006_src_channel;                                           // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                     // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                       // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          cmd_demux_src0_valid;                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [105:0] cmd_demux_src0_data;                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [4:0] cmd_demux_src0_channel;                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                             // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [105:0] cmd_demux_src1_data;                                              // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                             // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [4:0] cmd_demux_src1_channel;                                           // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                     // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                       // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                             // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [105:0] cmd_demux_src2_data;                                              // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                             // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [4:0] cmd_demux_src2_channel;                                           // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                     // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                       // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                             // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [105:0] cmd_demux_src3_data;                                              // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                             // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [4:0] cmd_demux_src3_channel;                                           // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                     // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                       // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                             // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [105:0] cmd_demux_src4_data;                                              // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                             // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [4:0] cmd_demux_src4_channel;                                           // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                     // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                       // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                         // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [105:0] cmd_demux_001_src0_data;                                          // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                         // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [4:0] cmd_demux_001_src0_channel;                                       // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                 // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                   // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                         // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [105:0] cmd_demux_001_src1_data;                                          // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                         // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [4:0] cmd_demux_001_src1_channel;                                       // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                 // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                   // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                         // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [105:0] cmd_demux_001_src2_data;                                          // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                         // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [4:0] cmd_demux_001_src2_channel;                                       // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                 // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                   // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                         // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [105:0] cmd_demux_001_src3_data;                                          // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                         // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [4:0] cmd_demux_001_src3_channel;                                       // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                 // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                   // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                         // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [105:0] cmd_demux_001_src4_data;                                          // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                         // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire    [4:0] cmd_demux_001_src4_channel;                                       // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                 // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                   // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [105:0] rsp_demux_src0_data;                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [4:0] rsp_demux_src0_channel;                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                             // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [105:0] rsp_demux_src1_data;                                              // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                             // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [4:0] rsp_demux_src1_channel;                                           // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                     // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                       // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                         // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [105:0] rsp_demux_001_src0_data;                                          // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                         // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [4:0] rsp_demux_001_src0_channel;                                       // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                 // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                   // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                         // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [105:0] rsp_demux_001_src1_data;                                          // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                         // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [4:0] rsp_demux_001_src1_channel;                                       // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                 // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                   // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                         // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [105:0] rsp_demux_002_src0_data;                                          // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                         // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [4:0] rsp_demux_002_src0_channel;                                       // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                 // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                   // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                         // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [105:0] rsp_demux_002_src1_data;                                          // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                         // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [4:0] rsp_demux_002_src1_channel;                                       // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                 // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                   // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                         // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [105:0] rsp_demux_003_src0_data;                                          // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                         // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [4:0] rsp_demux_003_src0_channel;                                       // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                 // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                   // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                         // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [105:0] rsp_demux_003_src1_data;                                          // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                         // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [4:0] rsp_demux_003_src1_channel;                                       // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                 // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                   // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                         // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [105:0] rsp_demux_004_src0_data;                                          // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                         // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [4:0] rsp_demux_004_src0_channel;                                       // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                 // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                   // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                         // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [105:0] rsp_demux_004_src1_data;                                          // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                         // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire    [4:0] rsp_demux_004_src1_channel;                                       // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                 // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                   // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rom_s1_agent_rdata_fifo_out_valid;                                // rom_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] rom_s1_agent_rdata_fifo_out_data;                                 // rom_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          rom_s1_agent_rdata_fifo_out_ready;                                // avalon_st_adapter:in_0_ready -> rom_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                    // avalon_st_adapter:out_0_valid -> rom_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                     // avalon_st_adapter:out_0_data -> rom_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                    // rom_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                    // avalon_st_adapter:out_0_error -> rom_s1_agent:rdata_fifo_sink_error
	wire          ram_s1_agent_rdata_fifo_out_valid;                                // ram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] ram_s1_agent_rdata_fifo_out_data;                                 // ram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          ram_s1_agent_rdata_fifo_out_ready;                                // avalon_st_adapter_001:in_0_ready -> ram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                // avalon_st_adapter_001:out_0_valid -> ram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                 // avalon_st_adapter_001:out_0_data -> ram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                // ram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                // avalon_st_adapter_001:out_0_error -> ram_s1_agent:rdata_fifo_sink_error
	wire          led_s1_agent_rdata_fifo_out_valid;                                // led_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] led_s1_agent_rdata_fifo_out_data;                                 // led_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          led_s1_agent_rdata_fifo_out_ready;                                // avalon_st_adapter_002:in_0_ready -> led_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                // avalon_st_adapter_002:out_0_valid -> led_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                 // avalon_st_adapter_002:out_0_data -> led_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                // led_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                // avalon_st_adapter_002:out_0_error -> led_s1_agent:rdata_fifo_sink_error
	wire          seg_s1_agent_rdata_fifo_out_valid;                                // seg_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] seg_s1_agent_rdata_fifo_out_data;                                 // seg_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          seg_s1_agent_rdata_fifo_out_ready;                                // avalon_st_adapter_003:in_0_ready -> seg_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                // avalon_st_adapter_003:out_0_valid -> seg_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                 // avalon_st_adapter_003:out_0_data -> seg_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                // seg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                // avalon_st_adapter_003:out_0_error -> seg_s1_agent:rdata_fifo_sink_error
	wire          uart_0_s1_agent_rdata_fifo_out_valid;                             // uart_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] uart_0_s1_agent_rdata_fifo_out_data;                              // uart_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          uart_0_s1_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_004:in_0_ready -> uart_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                // avalon_st_adapter_004:out_0_valid -> uart_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                 // avalon_st_adapter_004:out_0_data -> uart_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                // uart_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                // avalon_st_adapter_004:out_0_error -> uart_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rom_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (pico_cyc10_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rom_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (rom_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (rom_s1_agent_m0_read),                           //                         .read
		.uav_write              (rom_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (rom_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (rom_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (rom_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (rom_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (rom_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (rom_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (rom_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (rom_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (rom_s1_write),                                   //                         .write
		.av_readdata            (rom_s1_readdata),                                //                         .readdata
		.av_writedata           (rom_s1_writedata),                               //                         .writedata
		.av_byteenable          (rom_s1_byteenable),                              //                         .byteenable
		.av_chipselect          (rom_s1_chipselect),                              //                         .chipselect
		.av_clken               (rom_s1_clken),                                   //                         .clken
		.av_debugaccess         (rom_s1_debugaccess),                             //                         .debugaccess
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ram_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (pico_cyc10_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ram_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (ram_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (ram_s1_agent_m0_read),                           //                         .read
		.uav_write              (ram_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (ram_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (ram_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (ram_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (ram_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (ram_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (ram_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (ram_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (ram_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (ram_s1_write),                                   //                         .write
		.av_readdata            (ram_s1_readdata),                                //                         .readdata
		.av_writedata           (ram_s1_writedata),                               //                         .writedata
		.av_byteenable          (ram_s1_byteenable),                              //                         .byteenable
		.av_chipselect          (ram_s1_chipselect),                              //                         .chipselect
		.av_clken               (ram_s1_clken),                                   //                         .clken
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (pico_cyc10_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                           //                         .read
		.uav_write              (led_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (led_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (led_s1_write),                                   //                         .write
		.av_readdata            (led_s1_readdata),                                //                         .readdata
		.av_writedata           (led_s1_writedata),                               //                         .writedata
		.av_chipselect          (led_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) seg_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (pico_cyc10_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (seg_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (seg_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (seg_s1_agent_m0_read),                           //                         .read
		.uav_write              (seg_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (seg_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (seg_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (seg_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (seg_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (seg_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (seg_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (seg_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (seg_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (seg_s1_write),                                   //                         .write
		.av_readdata            (seg_s1_readdata),                                //                         .readdata
		.av_writedata           (seg_s1_writedata),                               //                         .writedata
		.av_chipselect          (seg_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uart_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (pico_cyc10_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (uart_0_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (uart_0_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (uart_0_s1_agent_m0_read),                        //                         .read
		.uav_write              (uart_0_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (uart_0_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (uart_0_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (uart_0_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (uart_0_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (uart_0_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (uart_0_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (uart_0_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (uart_0_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (uart_0_s1_write),                                //                         .write
		.av_read                (uart_0_s1_read),                                 //                         .read
		.av_readdata            (uart_0_s1_readdata),                             //                         .readdata
		.av_writedata           (uart_0_s1_writedata),                            //                         .writedata
		.av_begintransfer       (uart_0_s1_begintransfer),                        //                         .begintransfer
		.av_chipselect          (uart_0_s1_chipselect),                           //                         .chipselect
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI4Lite"),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (85),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_QOS_L                 (86),
		.PKT_QOS_H                 (86),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (5),
		.ID                        (0)
	) pico_cyc10_0_altera_axi4lite_master_agent (
		.aclk                   (clk_0_clk_clk),                                                    //              clk.clk
		.aresetn                (~pico_cyc10_0_reset_reset_bridge_in_reset_reset),                  //        clk_reset.reset_n
		.write_cp_valid         (pico_cyc10_0_altera_axi4lite_master_agent_write_cp_valid),         //         write_cp.valid
		.write_cp_data          (pico_cyc10_0_altera_axi4lite_master_agent_write_cp_data),          //                 .data
		.write_cp_startofpacket (pico_cyc10_0_altera_axi4lite_master_agent_write_cp_startofpacket), //                 .startofpacket
		.write_cp_endofpacket   (pico_cyc10_0_altera_axi4lite_master_agent_write_cp_endofpacket),   //                 .endofpacket
		.write_cp_ready         (pico_cyc10_0_altera_axi4lite_master_agent_write_cp_ready),         //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                 //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                              //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                        //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                          //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                //                 .ready
		.read_cp_valid          (pico_cyc10_0_altera_axi4lite_master_agent_read_cp_valid),          //          read_cp.valid
		.read_cp_data           (pico_cyc10_0_altera_axi4lite_master_agent_read_cp_data),           //                 .data
		.read_cp_startofpacket  (pico_cyc10_0_altera_axi4lite_master_agent_read_cp_startofpacket),  //                 .startofpacket
		.read_cp_endofpacket    (pico_cyc10_0_altera_axi4lite_master_agent_read_cp_endofpacket),    //                 .endofpacket
		.read_cp_ready          (pico_cyc10_0_altera_axi4lite_master_agent_read_cp_ready),          //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                            //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                             //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                          //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                    //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                      //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                            //                 .ready
		.awaddr                 (pico_cyc10_0_altera_axi4lite_master_awaddr),                       // altera_axi_slave.awaddr
		.awprot                 (pico_cyc10_0_altera_axi4lite_master_awprot),                       //                 .awprot
		.awvalid                (pico_cyc10_0_altera_axi4lite_master_awvalid),                      //                 .awvalid
		.awready                (pico_cyc10_0_altera_axi4lite_master_awready),                      //                 .awready
		.wdata                  (pico_cyc10_0_altera_axi4lite_master_wdata),                        //                 .wdata
		.wstrb                  (pico_cyc10_0_altera_axi4lite_master_wstrb),                        //                 .wstrb
		.wvalid                 (pico_cyc10_0_altera_axi4lite_master_wvalid),                       //                 .wvalid
		.wready                 (pico_cyc10_0_altera_axi4lite_master_wready),                       //                 .wready
		.bresp                  (pico_cyc10_0_altera_axi4lite_master_bresp),                        //                 .bresp
		.bvalid                 (pico_cyc10_0_altera_axi4lite_master_bvalid),                       //                 .bvalid
		.bready                 (pico_cyc10_0_altera_axi4lite_master_bready),                       //                 .bready
		.araddr                 (pico_cyc10_0_altera_axi4lite_master_araddr),                       //                 .araddr
		.arprot                 (pico_cyc10_0_altera_axi4lite_master_arprot),                       //                 .arprot
		.arvalid                (pico_cyc10_0_altera_axi4lite_master_arvalid),                      //                 .arvalid
		.arready                (pico_cyc10_0_altera_axi4lite_master_arready),                      //                 .arready
		.rdata                  (pico_cyc10_0_altera_axi4lite_master_rdata),                        //                 .rdata
		.rresp                  (pico_cyc10_0_altera_axi4lite_master_rresp),                        //                 .rresp
		.rvalid                 (pico_cyc10_0_altera_axi4lite_master_rvalid),                       //                 .rvalid
		.rready                 (pico_cyc10_0_altera_axi4lite_master_rready),                       //                 .rready
		.awid                   (1'b0),                                                             //      (terminated)
		.awlen                  (4'b0000),                                                          //      (terminated)
		.awsize                 (3'b010),                                                           //      (terminated)
		.awburst                (2'b01),                                                            //      (terminated)
		.awlock                 (2'b00),                                                            //      (terminated)
		.awcache                (4'b0000),                                                          //      (terminated)
		.awqos                  (4'b0000),                                                          //      (terminated)
		.awregion               (4'b0000),                                                          //      (terminated)
		.awuser                 (1'b0),                                                             //      (terminated)
		.arid                   (1'b0),                                                             //      (terminated)
		.arlen                  (4'b0000),                                                          //      (terminated)
		.arsize                 (3'b010),                                                           //      (terminated)
		.arburst                (2'b01),                                                            //      (terminated)
		.arlock                 (2'b00),                                                            //      (terminated)
		.arcache                (4'b0000),                                                          //      (terminated)
		.arqos                  (4'b0000),                                                          //      (terminated)
		.arregion               (4'b0000),                                                          //      (terminated)
		.aruser                 (1'b0),                                                             //      (terminated)
		.wid                    (1'b0),                                                             //      (terminated)
		.wlast                  (1'b1),                                                             //      (terminated)
		.wuser                  (1'b0),                                                             //      (terminated)
		.bid                    (),                                                                 //      (terminated)
		.buser                  (),                                                                 //      (terminated)
		.rid                    (),                                                                 //      (terminated)
		.rlast                  (),                                                                 //      (terminated)
		.ruser                  ()                                                                  //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rom_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (pico_cyc10_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (rom_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (rom_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (rom_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (rom_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (rom_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (rom_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (rom_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (rom_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (rom_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (rom_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (rom_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (rom_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (rom_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (rom_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (rom_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (rom_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                            //                .channel
		.rf_sink_ready           (rom_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (rom_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (rom_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (rom_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (rom_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (rom_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (rom_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (rom_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (rom_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (rom_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (rom_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rom_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (rom_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rom_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rom_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (rom_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (rom_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (rom_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (rom_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (rom_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (rom_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (rom_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (rom_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (rom_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rom_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rom_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (rom_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (rom_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (rom_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (rom_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (rom_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ram_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (pico_cyc10_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ram_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (ram_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (ram_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (ram_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (ram_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (ram_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (ram_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (ram_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (ram_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (ram_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (ram_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (ram_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (ram_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (ram_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (ram_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (ram_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_001_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                        //                .channel
		.rf_sink_ready           (ram_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (ram_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (ram_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (ram_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (ram_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (ram_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (ram_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (ram_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (ram_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (ram_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),              //                .error
		.rdata_fifo_src_ready    (ram_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ram_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (ram_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ram_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ram_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (ram_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (ram_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (ram_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (ram_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (ram_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (ram_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (ram_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (ram_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (ram_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ram_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ram_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (ram_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (ram_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (ram_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (ram_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (ram_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (pico_cyc10_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (led_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (led_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_002_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                        //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),              //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (led_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (led_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (led_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (led_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (led_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) seg_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (pico_cyc10_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (seg_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (seg_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (seg_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (seg_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (seg_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (seg_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (seg_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (seg_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (seg_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (seg_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (seg_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (seg_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (seg_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (seg_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (seg_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (seg_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_003_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                        //                .channel
		.rf_sink_ready           (seg_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (seg_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (seg_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (seg_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (seg_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (seg_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (seg_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (seg_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (seg_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (seg_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),              //                .error
		.rdata_fifo_src_ready    (seg_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (seg_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (seg_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (seg_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (seg_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (seg_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (seg_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (seg_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (seg_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (seg_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (seg_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (seg_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (seg_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (seg_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (seg_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (seg_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (seg_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) uart_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (pico_cyc10_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (uart_0_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (uart_0_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (uart_0_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (uart_0_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (uart_0_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (uart_0_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (uart_0_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (uart_0_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (uart_0_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (uart_0_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (uart_0_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (uart_0_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (uart_0_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (uart_0_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (uart_0_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (uart_0_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_004_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                        //                .channel
		.rf_sink_ready           (uart_0_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (uart_0_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (uart_0_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (uart_0_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (uart_0_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (uart_0_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (uart_0_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (uart_0_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (uart_0_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (uart_0_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),              //                .error
		.rdata_fifo_src_ready    (uart_0_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uart_0_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (uart_0_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uart_0_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (uart_0_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (uart_0_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (uart_0_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (uart_0_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (uart_0_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (uart_0_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (uart_0_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (uart_0_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (uart_0_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_0_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uart_0_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (uart_0_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (uart_0_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (uart_0_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (uart_0_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (uart_0_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	pico_cyc10_qys_mm_interconnect_0_router router (
		.sink_ready         (pico_cyc10_0_altera_axi4lite_master_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (pico_cyc10_0_altera_axi4lite_master_agent_write_cp_valid),         //          .valid
		.sink_data          (pico_cyc10_0_altera_axi4lite_master_agent_write_cp_data),          //          .data
		.sink_startofpacket (pico_cyc10_0_altera_axi4lite_master_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pico_cyc10_0_altera_axi4lite_master_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (pico_cyc10_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_router router_001 (
		.sink_ready         (pico_cyc10_0_altera_axi4lite_master_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (pico_cyc10_0_altera_axi4lite_master_agent_read_cp_valid),         //          .valid
		.sink_data          (pico_cyc10_0_altera_axi4lite_master_agent_read_cp_data),          //          .data
		.sink_startofpacket (pico_cyc10_0_altera_axi4lite_master_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pico_cyc10_0_altera_axi4lite_master_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (pico_cyc10_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready          (router_001_src_ready),                                            //       src.ready
		.src_valid          (router_001_src_valid),                                            //          .valid
		.src_data           (router_001_src_data),                                             //          .data
		.src_channel        (router_001_src_channel),                                          //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                       //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (rom_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (rom_s1_agent_rp_valid),                          //          .valid
		.sink_data          (rom_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (rom_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (rom_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                           //       src.ready
		.src_valid          (router_002_src_valid),                           //          .valid
		.src_data           (router_002_src_data),                            //          .data
		.src_channel        (router_002_src_channel),                         //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                      //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (ram_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (ram_s1_agent_rp_valid),                          //          .valid
		.sink_data          (ram_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (ram_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (ram_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                           //       src.ready
		.src_valid          (router_003_src_valid),                           //          .valid
		.src_data           (router_003_src_data),                            //          .data
		.src_channel        (router_003_src_channel),                         //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                      //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (led_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                          //          .valid
		.sink_data          (led_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                           //       src.ready
		.src_valid          (router_004_src_valid),                           //          .valid
		.src_data           (router_004_src_data),                            //          .data
		.src_channel        (router_004_src_channel),                         //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                      //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (seg_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (seg_s1_agent_rp_valid),                          //          .valid
		.sink_data          (seg_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (seg_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (seg_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                           //       src.ready
		.src_valid          (router_005_src_valid),                           //          .valid
		.src_data           (router_005_src_data),                            //          .data
		.src_channel        (router_005_src_channel),                         //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                      //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (uart_0_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (uart_0_s1_agent_rp_valid),                       //          .valid
		.sink_data          (uart_0_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (uart_0_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (uart_0_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                           //       src.ready
		.src_valid          (router_006_src_valid),                           //          .valid
		.src_data           (router_006_src_data),                            //          .data
		.src_channel        (router_006_src_channel),                         //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                      //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                               //      sink.ready
		.sink_channel       (router_src_channel),                             //          .channel
		.sink_data          (router_src_data),                                //          .data
		.sink_startofpacket (router_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_src_valid),                               //          .valid
		.src0_ready         (cmd_demux_src0_ready),                           //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                           //          .valid
		.src0_data          (cmd_demux_src0_data),                            //          .data
		.src0_channel       (cmd_demux_src0_channel),                         //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                           //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                           //          .valid
		.src1_data          (cmd_demux_src1_data),                            //          .data
		.src1_channel       (cmd_demux_src1_channel),                         //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                           //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                           //          .valid
		.src2_data          (cmd_demux_src2_data),                            //          .data
		.src2_channel       (cmd_demux_src2_channel),                         //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                           //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                           //          .valid
		.src3_data          (cmd_demux_src3_data),                            //          .data
		.src3_channel       (cmd_demux_src3_channel),                         //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                           //      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                           //          .valid
		.src4_data          (cmd_demux_src4_data),                            //          .data
		.src4_channel       (cmd_demux_src4_channel),                         //          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket)                      //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                           //      sink.ready
		.sink_channel       (router_001_src_channel),                         //          .channel
		.sink_data          (router_001_src_data),                            //          .data
		.sink_startofpacket (router_001_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_001_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_001_src0_data),                        //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                       //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                       //          .valid
		.src1_data          (cmd_demux_001_src1_data),                        //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                       //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                       //          .valid
		.src2_data          (cmd_demux_001_src2_data),                        //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                     //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                 //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                       //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                       //          .valid
		.src3_data          (cmd_demux_001_src3_data),                        //          .data
		.src3_channel       (cmd_demux_001_src3_channel),                     //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),               //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                 //          .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                       //      src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                       //          .valid
		.src4_data          (cmd_demux_001_src4_data),                        //          .data
		.src4_channel       (cmd_demux_001_src4_channel),                     //          .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),               //          .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)                  //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_src_valid),                              //          .valid
		.src_data            (cmd_mux_src_data),                               //          .data
		.src_channel         (cmd_mux_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                         //          .channel
		.sink0_data          (cmd_demux_src0_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                          //          .valid
		.src_data            (cmd_mux_001_src_data),                           //          .data
		.src_channel         (cmd_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                         //          .channel
		.sink0_data          (cmd_demux_src1_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_mux_002_src_data),                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                         //          .channel
		.sink0_data          (cmd_demux_src2_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                  //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                         //          .channel
		.sink0_data          (cmd_demux_src3_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                  //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                          //          .valid
		.src_data            (cmd_mux_004_src_data),                           //          .data
		.src_channel         (cmd_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                         //          .channel
		.sink0_data          (cmd_demux_src4_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                  //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                           //      sink.ready
		.sink_channel       (router_002_src_channel),                         //          .channel
		.sink_data          (router_002_src_data),                            //          .data
		.sink_startofpacket (router_002_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_002_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_src0_data),                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_src1_data),                            //          .data
		.src1_channel       (rsp_demux_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                      //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                           //      sink.ready
		.sink_channel       (router_003_src_channel),                         //          .channel
		.sink_data          (router_003_src_data),                            //          .data
		.sink_startofpacket (router_003_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_003_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_001_src0_data),                        //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_001_src1_data),                        //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                           //      sink.ready
		.sink_channel       (router_004_src_channel),                         //          .channel
		.sink_data          (router_004_src_data),                            //          .data
		.sink_startofpacket (router_004_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_004_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_002_src1_data),                        //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                  //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_003_src1_data),                        //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                  //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                           //      sink.ready
		.sink_channel       (router_006_src_channel),                         //          .channel
		.sink_data          (router_006_src_data),                            //          .data
		.sink_startofpacket (router_006_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_006_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_004_src1_data),                        //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                  //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                              //       src.ready
		.src_valid           (rsp_mux_src_valid),                              //          .valid
		.src_data            (rsp_mux_src_data),                               //          .data
		.src_channel         (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                         //          .channel
		.sink0_data          (rsp_demux_src0_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                        //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                       //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                        //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                       //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                        //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket)                  //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //          .valid
		.src_data            (rsp_mux_001_src_data),                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                         //          .channel
		.sink0_data          (rsp_demux_src1_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                     //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                       //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                     //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                        //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                 //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                       //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                       //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                     //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                        //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                 //          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                       //     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                       //          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                     //          .channel
		.sink3_data          (rsp_demux_003_src1_data),                        //          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),               //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket),                 //          .endofpacket
		.sink4_ready         (rsp_demux_004_src1_ready),                       //     sink4.ready
		.sink4_valid         (rsp_demux_004_src1_valid),                       //          .valid
		.sink4_channel       (rsp_demux_004_src1_channel),                     //          .channel
		.sink4_data          (rsp_demux_004_src1_data),                        //          .data
		.sink4_startofpacket (rsp_demux_004_src1_startofpacket),               //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src1_endofpacket)                  //          .endofpacket
	);

	pico_cyc10_qys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rom_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (rom_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (rom_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                   //         .error
	);

	pico_cyc10_qys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ram_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (ram_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (ram_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)               //         .error
	);

	pico_cyc10_qys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)               //         .error
	);

	pico_cyc10_qys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (seg_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (seg_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (seg_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	pico_cyc10_qys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (pico_cyc10_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (uart_0_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (uart_0_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (uart_0_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)               //         .error
	);

endmodule
